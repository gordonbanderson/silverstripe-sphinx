###############################################
SphinxSearch Module
###############################################

Maintainer Contact
-----------------------------------------------
Hamish Friedlander
<hamish (at) silverstripe (dot) com>

Requirements
-----------------------------------------------
Sphinx 0.9.9-RC2 or greater with 64-bit document id support
On OS X, you'll probably need to raise the open file limit for more complex sites (see http://serverfault.com/questions/15564/where-are-the-default-ulimits-specified-on-os-x-10-5)

Documentation
-----------------------------------------------
http://doc.silverstripe.com/doku.php?id=modules:sphinx

Licensing
-----------------------------------------------
The file sphinxapi.php is the official php client for Sphinx, and is distributed under the GPL. We have email confirmation from
the Sphinx developers that we include sphinxapi.php in SilverStripe under a license similar to Sun's MySQL FOSS exception - that is, 
the file itself remains under GPL, but distribution within SilverStripe is OK without SilverStripe needing to be distributed under the GPL.  

Thanks to Andrew Aksyonoff and everyone involved in Sphinx

Quick Usage Overview
-----------------------------------------------
Add the SphinxSearchable decorator to any DataObjects you want to search (for example, SiteTree and File)

Use SphinxSearchForm instead of SearchForm

For more complex searching using SphinxSearch::search 

API
-----------------------------------------------

Six parts to this module

1. Sphinx - manages the searchd and indexer binaries, generating configuration files for them, starting and stopping them as needed. Use
   as both a controller and a singleton

2. SphinxSearch - handles performing actual searches

3. SphinxSearchable - decorator that handles introspection of DataObjects, and adds a couple of utility functions to DataObjects

4. SphinxVariants - handles altering index building and searching to account for things like Versioned and Subsites adjusting the access semantics

5. SphinxSearchForm - provides a SearchForm-a-like, using Sphinx instead of database specific full-text search

6. Spell - interfaces with hunspell for the 'Did you mean..' functionality


SilverStripe to Sphinx mapping
===============================================

Sphinx, SilverStripe and Global IDs
-----------------------------------------------

Sphinx needs globally unique IDs for all documents. SilverStripe only provides unique IDs within a model inheritance chain - 
that is, classes that are direct descendants of DataObject have a unique set of IDs with their children, but not with each other.

In order to provide globally unique IDs to Sphinx, this module uses a 64 bit globally unique ID, the high dword being the 32 bit CRC of the ClassInfo::baseTableName 
(equivilent to the ClassName of the direct decendant of DataObject), and the low dword the 32 bit row ID. This has these caveats:

 * Sphinx must be compiled in 64 bit document ID mode.
 * There must be no collision in the set of CRC32(ClassName). This is checked on config building, and the chances of collision are very small.
 
 Additionally, the original row ID, as well as the CRC of the baseTableName and the CRC of the ClassName are available in the attributes _id, _baseid and _classid respectively.
 These are useful to avoid having to do 64 bit math, and for class-specific filtering, such as is needed by SphinxVariants_Subsite to filter differently depending on the class
 
Sphinx, SilverStripe and Class Heirarchies
-----------------------------------------------

Each SilverStripe DataObject Class is mapped directly to an Index (or multiple variant indexes - for example SiteTree + SiteTreeLive). When we want to search on a class that has subclasses,
we simply search across several indexes. This gives us several advantages

 * Obvious mapping
 * No shared column issues - each index has exactly the set of columns of it's equivilent class
 * Quick index updating - no need to update the SiteTree index when any child is updated

TODO
-----------------------------------------------

 * Specify weighting per field
 * Allow fields to be hidden
 * Put hasMany attributes back in (was taken out as conflicted with Variant changes)
 * Allow using TCP to connect with searchd, rather than always using unix sockets
 * Support windows and databases other than MySQL



